---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: pp-headers-append # Modify this line with a unique name for the target service
  namespace: default
spec:
  configPatches:
  - applyTo: ROUTE_CONFIGURATION
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: MERGE
      value:
        request_headers_to_add:
          - header:
              key: "tokens"
              value: "pp" # Modify this line with the token for selected service
            append: true
          - header:
              key: "sources"
              value: "productpage" # Modify this line with the service name
            append: true
  workloadSelector:
    labels:
      app: productpage # Modify this line with the service name
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rev-headers-in # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: reviews # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""
              request_handle:logWarn("= RCVD srcs: "..sources.." tokens: "..tokens.." =")

              local bSources = enc("sourcesREV")
              local bSrcs = enc(sources)

              local bTokens = enc("tokensREV")
              local bToks = enc(tokens)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "reviews",
              }, '{"key": "'..bSources..'", "value": "'..bSrcs..'"}', 300000)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "reviews",
              }, '{"key": "'..bTokens..'", "value": "'..bToks..'"}', 300000)

            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rev-headers-out # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: reviews # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""

              local bSources = enc("sourcesREV")
              local bTokens = enc("tokensREV")

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "reviews",
              }, '{"key": "'..bSources..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              local srcVal = dec(string.sub(body, vInd+8, cInd-6))

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "reviews",
              }, '{"key": "'..bTokens..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              srcTok = dec(string.sub(body, vInd+8, cInd-6))

              request_handle:headers():replace("sources", srcVal..",reviews")
              request_handle:headers():replace("tokens", srcTok..",rev")

              local sources = request_handle:headers():get("sources")
              local tokens = request_handle:headers():get("tokens")
              request_handle:logWarn("= SENT srcs: "..sources.." tokens: "..tokens.." =")
            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rat-headers-in # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: ratings # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""
              request_handle:logWarn("= RCVD srcs: "..sources.." tokens: "..tokens.." =")

              local bSources = enc("sourcesRAT")
              local bSrcs = enc(sources)

              local bTokens = enc("tokensRAT")
              local bToks = enc(tokens)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "ratings",
              }, '{"key": "'..bSources..'", "value": "'..bSrcs..'"}', 300000)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "ratings",
              }, '{"key": "'..bTokens..'", "value": "'..bToks..'"}', 300000)

            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: rat-headers-out # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: ratings # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""

              local bSources = enc("sourcesRAT")
              local bTokens = enc("tokensRAT")

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "ratings",
              }, '{"key": "'..bSources..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              local srcVal = dec(string.sub(body, vInd+8, cInd-6))

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "ratings",
              }, '{"key": "'..bTokens..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              srcTok = dec(string.sub(body, vInd+8, cInd-6))

              request_handle:headers():replace("sources", srcVal..",ratings")
              request_handle:headers():replace("tokens", srcTok..",rat")

              local sources = request_handle:headers():get("sources")
              local tokens = request_handle:headers():get("tokens")
              request_handle:logWarn("= SENT srcs: "..sources.." tokens: "..tokens.." =")
            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: det-headers-in # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: details # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""
              request_handle:logWarn("= RCVD srcs: "..sources.." tokens: "..tokens.." =")

              local bSources = enc("sourcesDET")
              local bSrcs = enc(sources)

              local bTokens = enc("tokensDET")
              local bToks = enc(tokens)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "details",
              }, '{"key": "'..bSources..'", "value": "'..bSrcs..'"}', 300000)

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/put",
                [":authority"] = "details",
              }, '{"key": "'..bTokens..'", "value": "'..bToks..'"}', 300000)

            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: det-headers-out # Modify this line with a unique name for the target service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: details # Modify this line with the service name
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              sources = request_handle:headers():get("sources") or ""
              tokens = request_handle:headers():get("tokens") or ""

              local bSources = enc("sourcesDET")
              local bTokens = enc("tokensDET")

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "details",
              }, '{"key": "'..bSources..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              local srcVal = dec(string.sub(body, vInd+8, cInd-6))

              local headers, body = request_handle:httpCall("outbound|2379||etcd.default.svc.cluster.local", {
                [":method"] = "POST",
                [":path"] = "/v3/kv/range",
                [":authority"] = "details",
              }, '{"key": "'..bTokens..'"}', 300000)
              local vInd = string.find(body, 'value', 1, true)
              local cInd = string.find(body, 'count', 1, true)
              srcTok = dec(string.sub(body, vInd+8, cInd-6))

              request_handle:headers():replace("sources", srcVal..",details")
              request_handle:headers():replace("tokens", srcTok..",det")

              local sources = request_handle:headers():get("sources")
              local tokens = request_handle:headers():get("tokens")
              request_handle:logWarn("= SENT srcs: "..sources.." tokens: "..tokens.." =")
            end

            function envoy_on_response(response_handle)
            end

            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- You will need this for encoding/decoding
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x)
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- decoding
            function dec(data)
                data = string.gsub(data, '[^'..b..'=]', '')
                return (data:gsub('.', function(x)
                    if (x == '=') then return '' end
                    local r,f='',(b:find(x)-1)
                    for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                    return r;
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                    if (#x ~= 8) then return '' end
                    local c=0
                    for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                        return string.char(c)
                end))
            end
